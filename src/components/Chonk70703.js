/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'

export function Chonk70703(props) {
  const { nodes, materials } = useGLTF('/70703.glb')

  // Function to check if a material's color matches target color
  const processEmissiveMaterial = (material) => {
    if (!material.color) return material

    // Create a new material to avoid modifying the original
    const newMaterial = material.clone()

    // Convert material color to hex for easier comparison
    const colorHex = '#' + newMaterial.color.getHexString()

    // Check for specific colors and set emissive properties
    if (colorHex === '#ff0021' || colorHex === '#ff3953') { // Red
      newMaterial.emissive = newMaterial.color
      newMaterial.emissiveIntensity = 20
    }
    // Add more color conditions as needed
    // else if (colorHex === '#00ff00') { // Green
    //   newMaterial.emissive = newMaterial.color
    //   newMaterial.emissiveIntensity = 1
    // }

    return newMaterial
  }

  // Helper function to create mesh with processed material
  const createMeshWithProcessedMaterial = (meshData) => (
    <mesh
      castShadow
      receiveShadow
      geometry={meshData.geometry}
      material={processEmissiveMaterial(meshData.material)}
      position={meshData.position}
    />
  )

  return (
    <group {...props} dispose={null}>
      <group rotation={[0, Math.PI / 2, 0]}>
        {/* Process all meshes from 0 to 7 */}
        {Array.from({ length: 8 }, (_, i) => (
          <mesh
            key={`mesh_${i}`}
            castShadow
            receiveShadow
            geometry={nodes[`mesh_${i}`].geometry}
            material={processEmissiveMaterial(nodes[`mesh_${i}`].material)}
            position={nodes[`mesh_${i}`].position}
          />
        ))}
      </group>
      <group rotation={[0, Math.PI / 2, 0]}>
        {/* Process meshes from 8 to 43 */}
        {Array.from({ length: 36 }, (_, i) => (
          <mesh
            key={`mesh_${i + 8}`}
            castShadow
            receiveShadow
            geometry={nodes[`mesh_${i + 8}`].geometry}
            material={processEmissiveMaterial(nodes[`mesh_${i + 8}`].material)}
            position={nodes[`mesh_${i + 8}`].position}
          />
        ))}
      </group>
      <group rotation={[0, Math.PI / 2, 0]}>
        {/* Process meshes from 44 to 123 */}
        {Array.from({ length: 80 }, (_, i) => (
          <mesh
            key={`mesh_${i + 44}`}
            castShadow
            receiveShadow
            geometry={nodes[`mesh_${i + 44}`].geometry}
            material={processEmissiveMaterial(nodes[`mesh_${i + 44}`].material)}
            position={nodes[`mesh_${i + 44}`].position}
          />
        ))}
      </group>
      <group rotation={[0, Math.PI / 2, 0]}>
        {/* Process remaining meshes from 124 to 382 */}
        {Array.from({ length: 259 }, (_, i) => (
          <mesh
            key={`mesh_${i + 124}`}
            castShadow
            receiveShadow
            geometry={nodes[`mesh_${i + 124}`].geometry}
            material={processEmissiveMaterial(nodes[`mesh_${i + 124}`].material)}
            position={nodes[`mesh_${i + 124}`].position}
          />
        ))}
      </group>
    </group>
  )
}

useGLTF.preload('/70703.glb')
